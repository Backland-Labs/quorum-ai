name: Attestation Tracker E2E Test

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'contracts/**'
      - 'backend/services/safe_service.py'
      - 'backend/models.py'
      - 'backend/utils/**'
      - 'scripts/test_attestation_tracker_e2e.py'
      - '.github/workflows/attestation-tracker-e2e.yaml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'contracts/**'
      - 'backend/services/safe_service.py'
      - 'backend/models.py'
      - 'backend/utils/**'
      - 'scripts/test_attestation_tracker_e2e.py'
      - '.github/workflows/attestation-tracker-e2e.yaml'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug logging'
        required: false
        default: false

jobs:
  test-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify tool installations
        run: |
          echo "Verifying installations..."
          anvil --version
          forge --version
          uv --version
          python --version

      - name: Install contract dependencies
        working-directory: contracts
        run: |
          # Remove any existing lib directory to ensure clean install
          rm -rf lib
          
          # Initialize git if needed for forge dependencies
          if [ ! -d .git ]; then
            git init
            git config user.name "CI"
            git config user.email "ci@example.com"
          fi
          
          # Install forge dependencies with proper depth
          forge install foundry-rs/forge-std --no-git
          forge install OpenZeppelin/openzeppelin-contracts --no-git
          
          # Verify installations
          echo "Checking forge-std installation:"
          ls -la lib/forge-std/src/ | head -5
          echo "Checking OpenZeppelin installation:"
          ls -la lib/openzeppelin-contracts/contracts/ | head -5

      - name: Build contracts
        working-directory: contracts
        env:
          FOUNDRY_DISABLE_NIGHTLY_WARNING: true
        run: |
          echo "Building contracts..."
          forge build

      - name: Install Python dependencies
        working-directory: backend
        run: |
          echo "Installing Python dependencies..."
          uv pip install --system -r requirements.txt

      - name: Start Anvil fork
        run: |
          # Start Anvil with Base mainnet fork in background
          echo "Starting Anvil with Base mainnet fork..."
          anvil --fork-url https://mainnet.base.org --chain-id 8453 --auto-impersonate --silent &
          ANVIL_PID=$!
          echo "ANVIL_PID=$ANVIL_PID" >> $GITHUB_ENV
          
          # Wait for Anvil to be ready
          echo "Waiting for Anvil to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8545 > /dev/null; then
              echo "Anvil is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Anvil failed to start"
              exit 1
            fi
            sleep 1
          done

      - name: Verify Anvil connection
        run: |
          # Test RPC connection and verify chain ID
          echo "Testing RPC connection..."
          CHAIN_ID=$(curl -s -X POST http://localhost:8545 \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' | jq -r .result)
          
          echo "Chain ID: $CHAIN_ID"
          
          # Convert hex to decimal and verify it's Base (8453)
          CHAIN_ID_DEC=$((CHAIN_ID))
          if [ "$CHAIN_ID_DEC" -ne 8453 ]; then
            echo "Error: Expected chain ID 8453 (Base), got $CHAIN_ID_DEC"
            exit 1
          fi
          echo "✅ Connected to Base fork (chain ID: $CHAIN_ID_DEC)"

      - name: Deploy AttestationTracker contract
        working-directory: contracts
        env:
          PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
          ATTESTATION_TRACKER_OWNER: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          EAS_CONTRACT_ADDRESS: "0xF095fE4b23958b08D38e52d5d5674bBF0C03cbF6"
          LIVENESS_RATIO: "1000000000000000"
          FOUNDRY_DISABLE_NIGHTLY_WARNING: true
        run: |
          echo "Deploying AttestationTracker contract..."
          
          # Deploy the contract using forge script
          forge script script/Deploy.s.sol:DeployScript \
            --rpc-url http://localhost:8545 \
            --broadcast \
            --private-key $PRIVATE_KEY \
            -vvv || true
          
          # Extract deployed address from broadcast logs
          BROADCAST_FILE=$(find broadcast -name "*.json" -type f | head -1)
          if [ -f "$BROADCAST_FILE" ]; then
            DEPLOYED_ADDRESS=$(jq -r '.transactions[0].contractAddress // empty' "$BROADCAST_FILE")
            if [ ! -z "$DEPLOYED_ADDRESS" ] && [ "$DEPLOYED_ADDRESS" != "null" ]; then
              echo "ATTESTATION_TRACKER_ADDRESS=$DEPLOYED_ADDRESS" >> $GITHUB_ENV
              echo "✅ AttestationTracker deployed at: $DEPLOYED_ADDRESS"
            else
              echo "⚠️ Could not extract deployed address, will deploy in test"
            fi
          else
            echo "⚠️ No broadcast file found, will deploy in test"
          fi

      - name: Run E2E test
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          RPC_URL: "http://localhost:8545"
          PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
          ATTESTATION_TRACKER_OWNER: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          EAS_CONTRACT_ADDRESS: "0x4200000000000000000000000000000000000021"
          BASE_SAFE_ADDRESS: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          CHAIN_ID: "8453"
          ATTESTATION_CHAIN: "base"
          BASE_LEDGER_RPC: "http://localhost:8545"
        run: |
          echo "Running E2E test..."
          echo "Environment:"
          echo "  RPC_URL: $RPC_URL"
          echo "  ATTESTATION_TRACKER_ADDRESS: ${ATTESTATION_TRACKER_ADDRESS:-'Will be deployed'}"
          echo "  EAS_CONTRACT_ADDRESS: $EAS_CONTRACT_ADDRESS"
          echo "  CHAIN_ID: $CHAIN_ID"
          
          # Run the E2E test
          cd ${{ github.workspace }}
          uv run python scripts/test_attestation_tracker_e2e.py

      - name: Generate test report
        if: always()
        run: |
          # Create a summary of test results
          echo "## Attestation Tracker E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **All E2E tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SafeService initialization" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Attestation data encoding" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Transaction building" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ EIP-712 signature generation" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Contract interaction" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Attestation counter verification" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Event emission" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Error handling and fallback logic" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Chain: Base fork (8453)" >> $GITHUB_STEP_SUMMARY
          echo "- Python: 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- Foundry: nightly" >> $GITHUB_STEP_SUMMARY
          echo "- Test type: End-to-end integration" >> $GITHUB_STEP_SUMMARY
          
          if [ ! -z "$ATTESTATION_TRACKER_ADDRESS" ]; then
            echo "- AttestationTracker: $ATTESTATION_TRACKER_ADDRESS" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            contracts/broadcast/
            backend/*.log
            ethereum_private_key.txt
          retention-days: 7

      - name: Stop Anvil
        if: always()
        run: |
          if [ ! -z "$ANVIL_PID" ]; then
            echo "Stopping Anvil (PID: $ANVIL_PID)..."
            kill $ANVIL_PID || true
          fi

      - name: Cleanup
        if: always()
        run: |
          # Clean up any temporary files
          rm -f ethereum_private_key.txt
          
          # Make sure Anvil is stopped
          pkill anvil || true