/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Healthcheck
         * @description Pearl-compliant health check endpoint for monitoring state transitions.
         *
         *     Returns real-time information about agent state transitions to help
         *     the Pearl platform monitor agent health and responsiveness.
         *
         *     Returns:
         *         JSON with required fields:
         *         - seconds_since_last_transition: Time since last state change (float)
         *         - is_transitioning_fast: Boolean indicating if transitions are happening rapidly
         *         - period: (optional) The time period used to determine if transitioning fast
         *         - reset_pause_duration: (optional) Time to wait before resetting transition tracking
         */
        get: operations["healthcheck_healthcheck_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposals
         * @description Get list of proposals from a Snapshot space with optional filtering.
         */
        get: operations["get_proposals_proposals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal By Id
         * @description Get a specific proposal by ID.
         */
        get: operations["get_proposal_by_id_proposals__proposal_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Summarize Proposals
         * @description Summarize multiple proposals using AI.
         */
        post: operations["summarize_proposals_proposals_summarize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}/top-voters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal Top Voters
         * @description Get top voters for a specific proposal by voting power.
         */
        get: operations["get_proposal_top_voters_proposals__proposal_id__top_voters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent-run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Agent Run
         * @description Execute an autonomous agent run for a given Snapshot space.
         *
         *     This endpoint orchestrates the complete agent run workflow:
         *     1. Fetches active proposals from the specified Snapshot space
         *     2. Loads user preferences to guide voting decisions
         *     3. Uses AI to analyze proposals and make voting decisions
         *     4. Executes votes (or simulates them in dry run mode)
         *
         *     Args:
         *         request: AgentRunRequest containing space_id and dry_run flag
         *
         *     Returns:
         *         AgentRunResponse with execution results and vote decisions
         *
         *     Raises:
         *         HTTPException: If space_id is invalid or execution fails
         */
        post: operations["agent_run_agent_run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent-run/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Run Status
         * @description Get current agent run status.
         *
         *     Returns the agent's current state, last run timestamp, active status,
         *     and the space ID of the current/last run.
         *
         *     Returns:
         *         AgentRunStatus with current agent state information
         */
        get: operations["get_agent_run_status_agent_run_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent-run/decisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Run Decisions
         * @description Get recent voting decisions made by the agent.
         *
         *     Returns a list of the most recent voting decisions across all spaces,
         *     enriched with proposal titles from Snapshot.
         *
         *     Args:
         *         limit: Maximum number of decisions to return (default: 5, max: 100)
         *
         *     Returns:
         *         AgentDecisionsResponse with list of recent decisions
         */
        get: operations["get_agent_run_decisions_agent_run_decisions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent-run/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Run Statistics
         * @description Get aggregated statistics about agent runs.
         *
         *     Returns statistics including total runs, proposals evaluated, votes cast,
         *     average confidence scores, success rates, and average runtime.
         */
        get: operations["get_agent_run_statistics_agent_run_statistics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description Get current user preferences.
         *
         *     Returns the user's voting preferences configuration. If no preferences
         *     are found, returns 404 to indicate the user needs to complete setup.
         */
        get: operations["get_user_preferences_user_preferences_get"];
        /**
         * Update User Preferences
         * @description Update user preferences.
         *
         *     Saves the user's voting preferences configuration. Validates all fields
         *     according to the UserPreferences model constraints.
         */
        put: operations["update_user_preferences_user_preferences_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/monitored-daos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Monitored Daos
         * @description Get the list of monitored DAO spaces from configuration.
         *
         *     Returns the spaces configured via MONITORED_DAOS environment variable.
         *     This provides the frontend with the list of available DAO spaces for monitoring.
         */
        get: operations["get_monitored_daos_config_monitored_daos_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentDecisionResponse
         * @description Response model for an individual agent decision with enriched data.
         */
        AgentDecisionResponse: {
            /**
             * Proposal Id
             * @description The proposal ID that was voted on
             */
            proposal_id: string;
            /** @description The vote decision: FOR, AGAINST, or ABSTAIN */
            vote: components["schemas"]["VoteType"];
            /**
             * Confidence
             * @description Confidence score in the decision (0.0 to 1.0)
             */
            confidence: number;
            /**
             * Reasoning
             * @description AI-generated explanation for the vote
             */
            reasoning: string;
            /** @description The voting strategy used */
            strategy_used: components["schemas"]["VotingStrategy"];
            /**
             * Timestamp
             * @description ISO timestamp when the decision was made
             */
            timestamp: string;
            /**
             * Proposal Title
             * @description Title of the proposal from Snapshot
             */
            proposal_title: string;
        };
        /**
         * AgentDecisionsResponse
         * @description Response model for the agent decisions endpoint.
         */
        AgentDecisionsResponse: {
            /**
             * Decisions
             * @description List of recent voting decisions with enriched data
             */
            decisions: components["schemas"]["AgentDecisionResponse"][];
        };
        /**
         * AgentRunRequest
         * @description Request model for agent run execution.
         */
        AgentRunRequest: {
            /**
             * Space Id
             * @description Snapshot space ID to monitor
             */
            space_id: string;
            /**
             * Dry Run
             * @description If true, simulate without voting
             * @default false
             */
            dry_run: boolean;
        };
        /**
         * AgentRunResponse
         * @description Response model for agent run execution.
         */
        AgentRunResponse: {
            /**
             * Space Id
             * @description Snapshot space ID that was monitored
             */
            space_id: string;
            /**
             * Proposals Analyzed
             * @description Number of proposals analyzed
             */
            proposals_analyzed: number;
            /**
             * Votes Cast
             * @description List of vote decisions made
             */
            votes_cast: components["schemas"]["VoteDecision"][];
            /**
             * User Preferences Applied
             * @description Whether user preferences were applied
             */
            user_preferences_applied: boolean;
            /**
             * Execution Time
             * @description Execution time in seconds
             */
            execution_time: number;
            /**
             * Errors
             * @description List of errors encountered
             */
            errors?: string[];
            /**
             * Next Check Time
             * @description Next scheduled check time
             */
            next_check_time?: string | null;
        };
        /**
         * AgentRunStatistics
         * @description Aggregated statistics about agent runs across all spaces.
         */
        AgentRunStatistics: {
            /**
             * Total Runs
             * @description Total number of agent runs across all spaces
             */
            total_runs: number;
            /**
             * Total Proposals Evaluated
             * @description Total number of proposals evaluated
             */
            total_proposals_evaluated: number;
            /**
             * Total Votes Cast
             * @description Total number of votes cast
             */
            total_votes_cast: number;
            /**
             * Average Confidence Score
             * @description Average confidence score across all votes
             */
            average_confidence_score: number;
            /**
             * Success Rate
             * @description Percentage of runs completed without errors (0.0 to 1.0)
             */
            success_rate: number;
            /**
             * Average Runtime Seconds
             * @description Average runtime per run in seconds
             */
            average_runtime_seconds: number;
        };
        /**
         * AgentRunStatus
         * @description Response model for agent run status endpoint.
         */
        AgentRunStatus: {
            /**
             * Current State
             * @description Current state of the agent (e.g., IDLE, FETCHING_PROPOSALS)
             */
            current_state: string;
            /**
             * Last Run Timestamp
             * @description ISO timestamp of the last completed agent run
             */
            last_run_timestamp?: string | null;
            /**
             * Is Active
             * @description Whether the agent is currently running
             */
            is_active: boolean;
            /**
             * Current Space Id
             * @description Space ID of the current or last run
             */
            current_space_id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Proposal
         * @description Snapshot proposal model representing a governance proposal.
         */
        Proposal: {
            /**
             * Id
             * @description Unique proposal identifier
             */
            id: string;
            /**
             * Title
             * @description Proposal title
             */
            title: string;
            /**
             * Body
             * @description Full proposal description
             */
            body: string;
            /**
             * State
             * @description Current state of the proposal
             */
            state: string;
            /**
             * Author
             * @description Proposal author address
             */
            author: string;
            /**
             * Created
             * @description Creation timestamp
             */
            created: number;
            /**
             * Start
             * @description Voting start timestamp
             */
            start: number;
            /**
             * End
             * @description Voting end timestamp
             */
            end: number;
            /**
             * Votes
             * @description Total number of votes
             * @default 0
             */
            votes: number;
            /**
             * Scores Total
             * @description Total voting score
             * @default 0
             */
            scores_total: number;
            /**
             * Choices
             * @description Voting choice options
             */
            choices?: string[];
            /**
             * Scores
             * @description Scores per choice
             */
            scores?: number[];
            /**
             * Snapshot
             * @description Blockchain snapshot identifier
             */
            snapshot?: string | null;
            /**
             * Discussion
             * @description Discussion forum link
             */
            discussion?: string | null;
            /**
             * Ipfs
             * @description IPFS content hash
             */
            ipfs?: string | null;
            /**
             * Space Id
             * @description Parent space identifier
             */
            space_id?: string | null;
            /**
             * Is Active
             * @description Whether voting is currently open
             * @default false
             */
            is_active: boolean;
            /**
             * Time Remaining
             * @description Human-readable time remaining
             */
            time_remaining?: string | null;
            /**
             * Vote Choices
             * @description Processed voting choices with percentages
             */
            vote_choices?: components["schemas"]["VoteChoice"][];
        };
        /**
         * ProposalSummary
         * @description AI-generated summary of a proposal.
         */
        ProposalSummary: {
            /**
             * Proposal Id
             * @description The proposal ID being summarized
             */
            proposal_id: string;
            /**
             * Title
             * @description Original proposal title
             */
            title: string;
            /**
             * Summary
             * @description AI-generated concise summary
             */
            summary: string;
            /**
             * Key Points
             * @description List of key points from the proposal
             */
            key_points: string[];
            /** @description Risk level assessment */
            risk_assessment?: components["schemas"]["RiskLevel"] | null;
            /**
             * Recommendation
             * @description AI-generated voting recommendation
             */
            recommendation?: string | null;
            /**
             * Confidence
             * @description Confidence in the analysis
             */
            confidence: number;
        };
        /**
         * ProposalTopVoters
         * @description Collection of top voters for a proposal.
         *
         *     Contains a list of the most influential voters for a specific proposal,
         *     useful for displaying voting participation and influence distribution.
         */
        ProposalTopVoters: {
            /**
             * Proposal Id
             * @description Unique proposal identifier
             */
            proposal_id: string;
            /**
             * Voters
             * @description List of top voters by voting power
             */
            voters: components["schemas"]["ProposalVoter"][];
        };
        /**
         * ProposalVoter
         * @description Individual voter information for a proposal.
         *
         *     Represents a single voter's participation in a proposal vote,
         *     including their address, voting power, and vote choice.
         */
        ProposalVoter: {
            /**
             * Address
             * @description Voter's blockchain address
             */
            address: string;
            /**
             * Amount
             * @description Voting power as string to handle large numbers
             */
            amount: string;
            /** @description Vote choice */
            vote_type: components["schemas"]["VoteType"];
        };
        /**
         * RiskLevel
         * @description Risk assessment levels for proposals.
         * @enum {string}
         */
        RiskLevel: "LOW" | "MEDIUM" | "HIGH";
        /**
         * SummarizeRequest
         * @description Request model for proposal summarization.
         */
        SummarizeRequest: {
            /** Proposal Ids */
            proposal_ids: string[];
            /**
             * Include Risk Assessment
             * @default true
             */
            include_risk_assessment: boolean;
            /**
             * Include Recommendations
             * @default true
             */
            include_recommendations: boolean;
        };
        /**
         * SummarizeResponse
         * @description Response model for proposal summarization.
         */
        SummarizeResponse: {
            /**
             * Summaries
             * @description AI-generated summaries
             */
            summaries: components["schemas"]["ProposalSummary"][];
            /**
             * Processing Time
             * @description Time taken to process in seconds
             */
            processing_time: number;
            /**
             * Model Used
             * @description AI model used for summarization
             */
            model_used: string;
        };
        /**
         * UserPreferences
         * @description User preferences model for agent run configuration.
         */
        UserPreferences: {
            /**
             * @description Voting strategy to use
             * @default balanced
             */
            voting_strategy: components["schemas"]["VotingStrategy"];
            /**
             * Confidence Threshold
             * @description Minimum confidence threshold for voting
             * @default 0.7
             */
            confidence_threshold: number;
            /**
             * Max Proposals Per Run
             * @description Maximum proposals to analyze per run
             * @default 3
             */
            max_proposals_per_run: number;
            /**
             * Blacklisted Proposers
             * @description List of proposer addresses to avoid
             */
            blacklisted_proposers?: string[];
            /**
             * Whitelisted Proposers
             * @description List of trusted proposer addresses
             */
            whitelisted_proposers?: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VoteChoice
         * @description Individual voting choice for proposals.
         */
        VoteChoice: {
            /**
             * Choice
             * @description Numeric choice identifier
             */
            choice: number;
            /**
             * Label
             * @description Human-readable choice label
             */
            label: string;
            /**
             * Votes
             * @description Number of votes for this choice
             */
            votes: number;
            /**
             * Percentage
             * @description Percentage of total votes
             */
            percentage: number;
        };
        /**
         * VoteDecision
         * @description AI-generated voting decision for a proposal.
         */
        VoteDecision: {
            /**
             * Proposal Id
             * @description The proposal ID being voted on
             */
            proposal_id: string;
            /** @description The voting decision: FOR, AGAINST, or ABSTAIN */
            vote: components["schemas"]["VoteType"];
            /**
             * Confidence
             * @description Confidence score in the decision (0.0 to 1.0)
             */
            confidence: number;
            /**
             * Reasoning
             * @description AI-generated explanation for the vote
             */
            reasoning: string;
            /**
             * @description Risk level: LOW, MEDIUM, or HIGH
             * @default MEDIUM
             */
            risk_assessment: components["schemas"]["RiskLevel"];
            /**
             * Estimated Gas Cost
             * @description Estimated transaction cost in CELO
             * @default 0.005
             */
            estimated_gas_cost: number;
            /** @description The voting strategy used to make this decision */
            strategy_used: components["schemas"]["VotingStrategy"];
            /**
             * Space Id
             * @description Snapshot space ID for attestation
             */
            space_id?: string | null;
            /**
             * Attestation Status
             * @description Status: pending, success, failed
             */
            attestation_status?: string | null;
            /**
             * Attestation Tx Hash
             * @description On-chain attestation transaction hash
             */
            attestation_tx_hash?: string | null;
            /**
             * Attestation Uid
             * @description EAS attestation unique identifier
             */
            attestation_uid?: string | null;
            /**
             * Attestation Error
             * @description Error message if attestation failed
             */
            attestation_error?: string | null;
        };
        /**
         * VoteType
         * @description Vote types on proposals.
         * @enum {string}
         */
        VoteType: "FOR" | "AGAINST" | "ABSTAIN";
        /**
         * VotingStrategy
         * @description Voting strategies for autonomous agent decision making.
         * @enum {string}
         */
        VotingStrategy: "conservative" | "balanced" | "aggressive";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;

// Export commonly used types
export type AgentRunStatus = components['schemas']['AgentRunStatus'];
export type AgentDecisionResponse = components['schemas']['AgentDecisionResponse'];
export type AgentRunStatistics = components['schemas']['AgentRunStatistics'];
export type UserPreferences = components['schemas']['UserPreferences'];
export type Proposal = components['schemas']['Proposal'];
export type ProposalSummary = components['schemas']['ProposalSummary'];

export interface operations {
    healthcheck_healthcheck_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_proposals_proposals_get: {
        parameters: {
            query: {
                /** @description Snapshot space ID to fetch proposals from */
                space_id: string;
                state?: string | null;
                limit?: number;
                /** @description Number of proposals to skip */
                skip?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_by_id_proposals__proposal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Proposal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    summarize_proposals_proposals_summarize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SummarizeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SummarizeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_top_voters_proposals__proposal_id__top_voters_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalTopVoters"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agent_run_agent_run_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_run_status_agent_run_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunStatus"];
                };
            };
        };
    };
    get_agent_run_decisions_agent_run_decisions_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDecisionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_run_statistics_agent_run_statistics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunStatistics"];
                };
            };
        };
    };
    get_user_preferences_user_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
        };
    };
    update_user_preferences_user_preferences_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferences"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_monitored_daos_config_monitored_daos_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
