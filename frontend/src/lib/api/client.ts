/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organizations
         * @description Get top 3 organizations with their 3 most active proposals, summarized with AI.
         */
        get: operations["get_organizations_organizations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organizations List
         * @description Get list of available organizations, sorted alphabetically.
         */
        get: operations["get_organizations_list_organizations_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{org_id}/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization Overview
         * @description Get comprehensive overview data for a specific organization.
         */
        get: operations["get_organization_overview_organizations__org_id__overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/daos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Daos
         * @description Get list of available DAOs.
         */
        get: operations["get_daos_daos_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{org_id}/proposals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization Proposals
         * @description Get list of proposals for a specific organization.
         */
        get: operations["get_organization_proposals_organizations__org_id__proposals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/daos/{dao_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dao By Id
         * @description Get a specific DAO by ID.
         */
        get: operations["get_dao_by_id_daos__dao_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposals
         * @description Get list of proposals with optional filtering and sorting.
         */
        get: operations["get_proposals_proposals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal By Id
         * @description Get a specific proposal by ID.
         */
        get: operations["get_proposal_by_id_proposals__proposal_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Summarize Proposals
         * @description Summarize multiple proposals using AI.
         */
        post: operations["summarize_proposals_proposals_summarize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}/top-voters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal Top Voters
         * @description Get top voters for a specific proposal by voting power.
         */
        get: operations["get_proposal_top_voters_proposals__proposal_id__top_voters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * DAO
         * @description DAO (Decentralized Autonomous Organization) model.
         */
        DAO: {
            /**
             * Id
             * @description Unique DAO identifier
             */
            id: string;
            /**
             * Name
             * @description DAO name
             */
            name: string;
            /**
             * Slug
             * @description DAO slug for URLs
             */
            slug: string;
            /**
             * Description
             * @description DAO description
             */
            description?: string | null;
            /**
             * Organization Id
             * @description Organization identifier
             */
            organization_id: string;
            /**
             * Active Proposals Count
             * @description Number of active proposals
             * @default 0
             */
            active_proposals_count: number;
            /**
             * Total Proposals Count
             * @description Total number of proposals
             * @default 0
             */
            total_proposals_count: number;
        };
        /**
         * DAOListResponse
         * @description Response model for DAO listing.
         */
        DAOListResponse: {
            /**
             * Daos
             * @description List of DAOs
             */
            daos: components["schemas"]["DAO"][];
            /**
             * Next Cursor
             * @description Cursor for the next page of results
             */
            next_cursor?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Organization
         * @description Represents a DAO organization.
         */
        Organization: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Chain Ids */
            chain_ids?: string[];
            /** Token Ids */
            token_ids?: string[];
            /** Governor Ids */
            governor_ids?: string[];
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /** Creator */
            creator?: {
                [key: string]: unknown;
            } | null;
            /**
             * Has Active Proposals
             * @default false
             */
            has_active_proposals: boolean;
            /**
             * Proposals Count
             * @default 0
             */
            proposals_count: number;
            /**
             * Delegates Count
             * @default 0
             */
            delegates_count: number;
            /**
             * Delegates Votes Count
             * @default 0
             */
            delegates_votes_count: string;
            /**
             * Token Owners Count
             * @default 0
             */
            token_owners_count: number;
            /** Endorsement Service */
            endorsement_service?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * OrganizationListResponse
         * @description Response model for organization listing.
         */
        OrganizationListResponse: {
            /**
             * Organizations
             * @description List of organizations
             */
            organizations: components["schemas"]["Organization"][];
            /**
             * Next Cursor
             * @description Cursor for the next page of results
             */
            next_cursor?: string | null;
        };
        /**
         * OrganizationOverviewResponse
         * @description Response model for organization overview.
         */
        OrganizationOverviewResponse: {
            /**
             * Organization Id
             * @description Organization unique identifier
             */
            organization_id: string;
            /**
             * Organization Name
             * @description Organization name
             */
            organization_name: string;
            /**
             * Organization Slug
             * @description Organization slug for URLs
             */
            organization_slug: string;
            /**
             * Description
             * @description Organization description
             */
            description?: string | null;
            /**
             * Delegate Count
             * @description Number of delegates
             */
            delegate_count: number;
            /**
             * Token Holder Count
             * @description Number of token holders
             */
            token_holder_count: number;
            /**
             * Total Proposals Count
             * @description Total number of proposals
             */
            total_proposals_count: number;
            /**
             * Proposal Counts By Status
             * @description Proposal counts grouped by status
             */
            proposal_counts_by_status: {
                [key: string]: number;
            };
            /**
             * Recent Activity Count
             * @description Recent governance activity count
             */
            recent_activity_count: number;
            /**
             * Governance Participation Rate
             * @description Governance participation rate
             */
            governance_participation_rate: number;
        };
        /**
         * OrganizationWithProposals
         * @description Organization with its top proposals.
         */
        OrganizationWithProposals: {
            /** @description Organization details */
            organization: components["schemas"]["Organization"];
            /**
             * Proposals
             * @description Top 3 summarized proposals
             */
            proposals: components["schemas"]["ProposalSummary"][];
        };
        /**
         * Proposal
         * @description DAO proposal model.
         */
        Proposal: {
            /**
             * Id
             * @description Unique proposal identifier
             */
            id: string;
            /**
             * Title
             * @description Proposal title
             */
            title: string;
            /**
             * Description
             * @description Proposal description
             */
            description: string;
            /** @description Current proposal state */
            state: components["schemas"]["ProposalState"];
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Start Block
             * @description Block number when voting starts
             */
            start_block: number;
            /**
             * End Block
             * @description Block number when voting ends
             */
            end_block: number;
            /**
             * Votes For
             * @description Total votes in favor
             * @default 0
             */
            votes_for: string;
            /**
             * Votes Against
             * @description Total votes against
             * @default 0
             */
            votes_against: string;
            /**
             * Votes Abstain
             * @description Total abstain votes
             * @default 0
             */
            votes_abstain: string;
            /**
             * Dao Id
             * @description DAO this proposal belongs to
             */
            dao_id: string;
            /**
             * Dao Name
             * @description Name of the DAO
             */
            dao_name: string;
            /**
             * Url
             * @description URL to view proposal
             */
            url?: string | null;
        };
        /**
         * ProposalListResponse
         * @description Response model for proposal listing.
         */
        ProposalListResponse: {
            /**
             * Proposals
             * @description List of proposals
             */
            proposals: components["schemas"]["Proposal"][];
            /**
             * Next Cursor
             * @description Cursor for the next page of results
             */
            next_cursor?: string | null;
        };
        /**
         * ProposalState
         * @description Proposal state enumeration.
         * @enum {string}
         */
        ProposalState: "ACTIVE" | "CANCELED" | "CROSSCHAINEXECUTED" | "DEFEATED" | "EXECUTED" | "EXPIRED" | "PENDING" | "QUEUED" | "SUCCEEDED";
        /**
         * ProposalSummary
         * @description AI-generated proposal summary.
         */
        ProposalSummary: {
            /**
             * Proposal Id
             * @description Original proposal ID
             */
            proposal_id: string;
            /**
             * Title
             * @description Original proposal title
             */
            title: string;
            /**
             * Summary
             * @description AI-generated summary in plain English
             */
            summary: string;
            /**
             * Key Points
             * @description Key points extracted from proposal
             */
            key_points: string[];
            /**
             * Risk Level
             * @description Assessed risk level (LOW/MEDIUM/HIGH)
             */
            risk_level: string;
            /**
             * Recommendation
             * @description AI recommendation
             */
            recommendation: string;
            /**
             * Confidence Score
             * @description Confidence in analysis
             */
            confidence_score: number;
        };
        /**
         * ProposalTopVoters
         * @description Collection of top voters for a proposal.
         *
         *     Contains a list of the most influential voters for a specific proposal,
         *     useful for displaying voting participation and influence distribution.
         */
        ProposalTopVoters: {
            /**
             * Proposal Id
             * @description Unique proposal identifier
             */
            proposal_id: string;
            /**
             * Voters
             * @description List of top voters by voting power
             */
            voters: components["schemas"]["ProposalVoter"][];
        };
        /**
         * ProposalVoter
         * @description Individual voter information for a proposal.
         *
         *     Represents a single voter's participation in a proposal vote,
         *     including their address, voting power, and vote choice.
         */
        ProposalVoter: {
            /**
             * Address
             * @description Voter's blockchain address
             */
            address: string;
            /**
             * Amount
             * @description Voting power as string to handle large numbers
             */
            amount: string;
            /** @description Vote choice */
            vote_type: components["schemas"]["VoteType"];
        };
        /**
         * SortCriteria
         * @description Criteria for sorting proposals.
         * @enum {string}
         */
        SortCriteria: "created_date" | "vote_count" | "state" | "title";
        /**
         * SortOrder
         * @description Sort order.
         * @enum {string}
         */
        SortOrder: "asc" | "desc";
        /**
         * SummarizeRequest
         * @description Request model for proposal summarization.
         */
        SummarizeRequest: {
            /** Proposal Ids */
            proposal_ids: string[];
            /**
             * Include Risk Assessment
             * @default true
             */
            include_risk_assessment: boolean;
            /**
             * Include Recommendations
             * @default true
             */
            include_recommendations: boolean;
        };
        /**
         * SummarizeResponse
         * @description Response model for proposal summarization.
         */
        SummarizeResponse: {
            /**
             * Summaries
             * @description AI-generated summaries
             */
            summaries: components["schemas"]["ProposalSummary"][];
            /**
             * Processing Time
             * @description Time taken to process in seconds
             */
            processing_time: number;
            /**
             * Model Used
             * @description AI model used for summarization
             */
            model_used: string;
        };
        /**
         * TopOrganizationsResponse
         * @description Response model for top organizations with proposals.
         */
        TopOrganizationsResponse: {
            /**
             * Organizations
             * @description Top organizations with proposals
             */
            organizations: components["schemas"]["OrganizationWithProposals"][];
            /**
             * Processing Time
             * @description Time taken to process in seconds
             */
            processing_time: number;
            /**
             * Model Used
             * @description AI model used for summarization
             */
            model_used: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VoteType
         * @description Vote type enumeration.
         * @enum {string}
         */
        VoteType: "FOR" | "AGAINST" | "ABSTAIN";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_organizations_organizations_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopOrganizationsResponse"];
                };
            };
        };
    };
    get_organizations_list_organizations_list_get: {
        parameters: {
            query?: {
                limit?: number;
                after_cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_overview_organizations__org_id__overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationOverviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_daos_daos_get: {
        parameters: {
            query: {
                organization_id: string;
                limit?: number;
                after_cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DAOListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_proposals_organizations__org_id__proposals_get: {
        parameters: {
            query?: {
                state?: components["schemas"]["ProposalState"] | null;
                limit?: number;
                after_cursor?: string | null;
                sort_by?: components["schemas"]["SortCriteria"];
                sort_order?: components["schemas"]["SortOrder"];
            };
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dao_by_id_daos__dao_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dao_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DAO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposals_proposals_get: {
        parameters: {
            query?: {
                dao_id?: string | null;
                organization_id?: string | null;
                state?: components["schemas"]["ProposalState"] | null;
                limit?: number;
                after_cursor?: string | null;
                sort_by?: components["schemas"]["SortCriteria"];
                sort_order?: components["schemas"]["SortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_by_id_proposals__proposal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Proposal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    summarize_proposals_proposals_summarize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SummarizeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SummarizeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_top_voters_proposals__proposal_id__top_voters_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalTopVoters"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
