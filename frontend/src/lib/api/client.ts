/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposals
         * @description Get list of proposals from a Snapshot space with optional filtering.
         */
        get: operations["get_proposals_proposals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal By Id
         * @description Get a specific proposal by ID.
         */
        get: operations["get_proposal_by_id_proposals__proposal_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Summarize Proposals
         * @description Summarize multiple proposals using AI.
         */
        post: operations["summarize_proposals_proposals_summarize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proposals/{proposal_id}/top-voters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proposal Top Voters
         * @description Get top voters for a specific proposal by voting power.
         */
        get: operations["get_proposal_top_voters_proposals__proposal_id__top_voters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent-run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Agent Run
         * @description Execute an autonomous agent run for a given Snapshot space.
         *
         *     This endpoint orchestrates the complete agent run workflow:
         *     1. Fetches active proposals from the specified Snapshot space
         *     2. Loads user preferences to guide voting decisions
         *     3. Uses AI to analyze proposals and make voting decisions
         *     4. Executes votes (or simulates them in dry run mode)
         *
         *     Args:
         *         request: AgentRunRequest containing space_id and dry_run flag
         *
         *     Returns:
         *         AgentRunResponse with execution results and vote decisions
         *
         *     Raises:
         *         HTTPException: If space_id is invalid or execution fails
         */
        post: operations["agent_run_agent_run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description Get current user preferences.
         */
        get: operations["get_user_preferences_user_preferences_get"];
        /**
         * Update User Preferences
         * @description Update user preferences.
         */
        put: operations["update_user_preferences_user_preferences_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentRunRequest
         * @description Request model for agent run execution.
         */
        AgentRunRequest: {
            /**
             * Space Id
             * @description Snapshot space ID to monitor
             */
            space_id: string;
            /**
             * Dry Run
             * @description If true, simulate without voting
             * @default false
             */
            dry_run: boolean;
        };
        /**
         * AgentRunResponse
         * @description Response model for agent run execution.
         */
        AgentRunResponse: {
            /**
             * Space Id
             * @description Snapshot space ID that was monitored
             */
            space_id: string;
            /**
             * Proposals Analyzed
             * @description Number of proposals analyzed
             */
            proposals_analyzed: number;
            /**
             * Votes Cast
             * @description List of vote decisions made
             */
            votes_cast: components["schemas"]["VoteDecision"][];
            /**
             * User Preferences Applied
             * @description Whether user preferences were applied
             */
            user_preferences_applied: boolean;
            /**
             * Execution Time
             * @description Execution time in seconds
             */
            execution_time: number;
            /**
             * Errors
             * @description List of errors encountered
             */
            errors?: string[];
            /**
             * Next Check Time
             * @description Next scheduled check time
             */
            next_check_time?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Proposal
         * @description Snapshot-based DAO proposal model.
         */
        Proposal: {
            /**
             * Id
             * @description Unique proposal identifier
             */
            id: string;
            /**
             * Title
             * @description Proposal title
             */
            title: string;
            /**
             * Choices
             * @description Array of voting options
             */
            choices: string[];
            /**
             * Start
             * @description Start timestamp
             */
            start: number;
            /**
             * End
             * @description End timestamp
             */
            end: number;
            /**
             * State
             * @description Proposal state
             */
            state: string;
            /**
             * Author
             * @description Author's wallet address
             */
            author: string;
            /**
             * Network
             * @description Blockchain network
             */
            network: string;
            /**
             * Symbol
             * @description Token symbol
             */
            symbol: string;
            /**
             * Scores
             * @description Vote scores per choice
             */
            scores: number[];
            /**
             * Scores Total
             * @description Total voting power
             */
            scores_total: number;
            /**
             * Votes
             * @description Number of votes cast
             */
            votes: number;
            /**
             * Created
             * @description Creation timestamp
             */
            created: number;
            /**
             * Quorum
             * @description Quorum threshold
             */
            quorum: number;
            /**
             * Body
             * @description Proposal description/content
             */
            body?: string | null;
            /**
             * Snapshot
             * @description Block number snapshot
             */
            snapshot?: number | null;
            /**
             * Space
             * @description Associated space object
             */
            space?: {
                [key: string]: unknown;
            } | null;
            /**
             * Scores By Strategy
             * @description Breakdown by strategy
             */
            scores_by_strategy?: {
                [key: string]: unknown;
            } | null;
            /**
             * Updated
             * @description Last update timestamp
             */
            updated?: number | null;
            /**
             * Type
             * @description Proposal type
             */
            type?: string | null;
            /**
             * Strategies
             * @description Voting strategies used
             */
            strategies?: {
                [key: string]: unknown;
            }[];
            /**
             * Plugins
             * @description Additional plugins
             */
            plugins?: {
                [key: string]: unknown;
            } | null;
            /**
             * Ipfs
             * @description IPFS hash
             */
            ipfs?: string | null;
            /**
             * Discussion
             * @description Discussion link
             */
            discussion?: string | null;
            /**
             * Privacy
             * @description Privacy setting
             */
            privacy?: string | null;
        };
        /**
         * ProposalListResponse
         * @description Response model for proposal listing.
         */
        ProposalListResponse: {
            /**
             * Proposals
             * @description List of proposals
             */
            proposals: components["schemas"]["Proposal"][];
            /**
             * Next Cursor
             * @description Cursor for the next page of results
             */
            next_cursor?: string | null;
        };
        /**
         * ProposalState
         * @description Snapshot proposal state enumeration.
         * @enum {string}
         */
        ProposalState: "pending" | "active" | "closed";
        /**
         * ProposalSummary
         * @description AI-generated proposal summary.
         */
        ProposalSummary: {
            /**
             * Proposal Id
             * @description Original proposal ID
             */
            proposal_id: string;
            /**
             * Title
             * @description Original proposal title
             */
            title: string;
            /**
             * Summary
             * @description AI-generated summary in plain English
             */
            summary: string;
            /**
             * Key Points
             * @description Key points extracted from proposal
             */
            key_points: string[];
            /**
             * Risk Level
             * @description Assessed risk level (LOW/MEDIUM/HIGH)
             */
            risk_level: string;
            /**
             * Recommendation
             * @description AI recommendation
             */
            recommendation: string;
            /**
             * Confidence Score
             * @description Confidence in analysis
             */
            confidence_score: number;
        };
        /**
         * ProposalTopVoters
         * @description Collection of top voters for a proposal.
         *
         *     Contains a list of the most influential voters for a specific proposal,
         *     useful for displaying voting participation and influence distribution.
         */
        ProposalTopVoters: {
            /**
             * Proposal Id
             * @description Unique proposal identifier
             */
            proposal_id: string;
            /**
             * Voters
             * @description List of top voters by voting power
             */
            voters: components["schemas"]["ProposalVoter"][];
        };
        /**
         * ProposalVoter
         * @description Individual voter information for a proposal.
         *
         *     Represents a single voter's participation in a proposal vote,
         *     including their address, voting power, and vote choice.
         */
        ProposalVoter: {
            /**
             * Address
             * @description Voter's blockchain address
             */
            address: string;
            /**
             * Amount
             * @description Voting power as string to handle large numbers
             */
            amount: string;
            /** @description Vote choice */
            vote_type: components["schemas"]["VoteType"];
        };
        /**
         * RiskLevel
         * @description Risk assessment levels for proposals.
         * @enum {string}
         */
        RiskLevel: "LOW" | "MEDIUM" | "HIGH";
        /**
         * SummarizeRequest
         * @description Request model for proposal summarization.
         */
        SummarizeRequest: {
            /** Proposal Ids */
            proposal_ids: string[];
            /**
             * Include Risk Assessment
             * @default true
             */
            include_risk_assessment: boolean;
            /**
             * Include Recommendations
             * @default true
             */
            include_recommendations: boolean;
        };
        /**
         * SummarizeResponse
         * @description Response model for proposal summarization.
         */
        SummarizeResponse: {
            /**
             * Summaries
             * @description AI-generated summaries
             */
            summaries: components["schemas"]["ProposalSummary"][];
            /**
             * Processing Time
             * @description Time taken to process in seconds
             */
            processing_time: number;
            /**
             * Model Used
             * @description AI model used for summarization
             */
            model_used: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VoteDecision
         * @description AI-generated voting decision for a proposal.
         */
        VoteDecision: {
            /**
             * Proposal Id
             * @description The proposal ID being voted on
             */
            proposal_id: string;
            /** @description The voting decision: FOR, AGAINST, or ABSTAIN */
            vote: components["schemas"]["VoteType"];
            /**
             * Confidence
             * @description Confidence score in the decision (0.0 to 1.0)
             */
            confidence: number;
            /**
             * Reasoning
             * @description AI-generated explanation for the vote
             */
            reasoning: string;
            /**
             * @description Risk level: LOW, MEDIUM, or HIGH
             * @default MEDIUM
             */
            risk_assessment: components["schemas"]["RiskLevel"];
            /**
             * Estimated Gas Cost
             * @description Estimated transaction cost in CELO
             * @default 0.005
             */
            estimated_gas_cost: number;
            /** @description The voting strategy used to make this decision */
            strategy_used: components["schemas"]["VotingStrategy"];
        };
        /**
         * VoteType
         * @description Vote type enumeration.
         * @enum {string}
         */
        VoteType: "FOR" | "AGAINST" | "ABSTAIN";
        /**
         * VotingStrategy
         * @description Voting strategies for autonomous agent decision making.
         * @enum {string}
         */
        VotingStrategy: "conservative" | "balanced" | "aggressive";
        /**
         * UserPreferences
         * @description User preferences for autonomous voting agent behavior.
         */
        UserPreferences: {
            /**
             * Voting Strategy
             * @description The voting strategy to use for decisions
             */
            voting_strategy: components["schemas"]["VotingStrategy"];
            /**
             * Confidence Threshold
             * @description Minimum confidence score (0.0 to 1.0) required to cast a vote
             */
            confidence_threshold: number;
            /**
             * Max Proposals Per Run
             * @description Maximum number of proposals to analyze in a single agent run
             */
            max_proposals_per_run: number;
            /**
             * Blacklisted Proposers
             * @description List of wallet addresses whose proposals should be automatically rejected
             */
            blacklisted_proposers: string[];
            /**
             * Whitelisted Proposers
             * @description List of wallet addresses whose proposals should receive priority consideration
             */
            whitelisted_proposers: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_proposals_proposals_get: {
        parameters: {
            query: {
                /** @description Snapshot space ID to fetch proposals from */
                space_id: string;
                state?: components["schemas"]["ProposalState"] | null;
                limit?: number;
                /** @description Number of proposals to skip */
                skip?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_by_id_proposals__proposal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Proposal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    summarize_proposals_proposals_summarize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SummarizeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SummarizeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proposal_top_voters_proposals__proposal_id__top_voters_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                proposal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposalTopVoters"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agent_run_agent_run_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_preferences_user_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_user_preferences_user_preferences_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferences"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
