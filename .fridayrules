# Quorum AI - Friday Rules
# Architecture, testing, and linting guidelines

## Architecture
- Backend: Python 3.12 FastAPI (backend/), modular services architecture
- Frontend: SvelteKit + TypeScript (frontend/), Tailwind CSS
- Development: ./startup.sh starts both services (backend :8000, frontend :5173)
- Production: docker-compose.yml builds containerized services

## Testing

### Backend
- Unit tests: cd backend && uv run pytest
- With coverage: cd backend && uv run pytest --cov
- Integration tests: cd backend && uv run pytest -m integration
- Test files in backend/tests/, asyncio auto-mode enabled

### Frontend
- Unit tests: cd frontend && npm run test
- Watch mode: cd frontend && npm run test:watch
- Uses Vitest with happy-dom + @testing-library/svelte

## Linting & Static Analysis

### Backend
- Code linting: cd backend && uv run ruff check . (add --fix for auto-fix)
- Type checking: cd backend && uv run mypy
- Configuration in pyproject.toml

### Frontend
- TypeScript check: cd frontend && npm run check
- Svelte-specific checking via svelte-check

## Development Notes
- API client auto-generated from OpenAPI spec: npm run generate-api
- Environment variables loaded from .env file
- Backend uses Pydantic AI for AI services integration
